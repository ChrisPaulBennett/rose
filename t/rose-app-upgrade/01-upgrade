#!/bin/bash
#-------------------------------------------------------------------------------
# (C) British Crown Copyright 2012-3 Met Office.
# 
# This file is part of Rose, a framework for scientific suites.
# 
# Rose is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Rose is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Rose. If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Test "rose macro" in built-in value checking mode.
#-------------------------------------------------------------------------------
. $(dirname $0)/test_header
init <<'__CONFIG__'
meta=rose-app-upgrade-test/0.1
__CONFIG__
#-------------------------------------------------------------------------------
tests 27
#-------------------------------------------------------------------------------
# Check boolean type checking.
TEST_KEY=$TEST_KEY_BASE-bad-version
setup
init_meta rose-app-upgrade
init_macro rose-app-upgrade 0.2 <<__MACRO__
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#-----------------------------------------------------------------------------
# (C) Crown copyright Met Office. All rights reserved.
#-----------------------------------------------------------------------------

import rose.upgrade


class Upgrade02to03(rose.upgrade.MacroUpgrade):

    """Upgrade from 0.2 to 0.3."""

    BEFORE_TAG = "0.2"
    AFTER_TAG = "0.3"

    def upgrade(self, config, meta_config=None):
        self.add_setting(config, ["env", "C"], "0")
        self.add_setting(config, ["env", "D"], "1")
        self.remove_setting(config, ["env", "A"])
        self.remove_setting(config, ["env", "B"])
        return config, self.reports
__MACRO__
run_pass "$TEST_KEY" rose macro -V --config=../config
file_cmp "$TEST_KEY.out" "$TEST_KEY.out" </dev/null
file_cmp "$TEST_KEY.err" "$TEST_KEY.err" </dev/null
teardown

#-------------------------------------------------------------------------------
# Check character type checking.
TEST_KEY=$TEST_KEY_BASE-character-ok
setup
init_meta <<__META_CONFIG__
[namelist:values_nl1=my_char]
type=character

[namelist:values_nl1=my_char_null]
type=character

[namelist:values_nl1=my_char_esc]
type=character

[namelist:values_nl1=my_char_complex_esc]
type=character

[namelist:values_nl1=my_char_array_any]
length=:
type=character

[namelist:values_nl1=my_char_array_fixed]
length=4
type=character
__META_CONFIG__
run_pass "$TEST_KEY" rose macro -V --config=../config
file_cmp "$TEST_KEY.out" "$TEST_KEY.out" </dev/null
file_cmp "$TEST_KEY.err" "$TEST_KEY.err" </dev/null
teardown
#-------------------------------------------------------------------------------
# Check integer type checking.
TEST_KEY=$TEST_KEY_BASE-int-ok
setup
init_meta <<__META_CONFIG__
[namelist:values_nl1=my_int]
type=integer

[namelist:values_nl1=my_int_as_float]
type=integer

[namelist:values_nl1=my_int_sci_notation]
type=integer

[namelist:values_nl1=my_int_array_any]
length=:
type=integer

[namelist:values_nl1=my_int_array_fixed]
length=6
type=integer
__META_CONFIG__
run_pass "$TEST_KEY" rose macro -V --config=../config
file_cmp "$TEST_KEY.out" "$TEST_KEY.out" </dev/null
file_cmp "$TEST_KEY.err" "$TEST_KEY.err" </dev/null
teardown
#-------------------------------------------------------------------------------
# Check raw (None) type checking.
TEST_KEY=$TEST_KEY_BASE-value-type-raw-ok
setup
init_meta <<__META_CONFIG__
[namelist:values_nl1=my_raw]
__META_CONFIG__
run_pass "$TEST_KEY" rose macro --config=../config rose.macros.DefaultValidators
file_cmp "$TEST_KEY.out" "$TEST_KEY.out" </dev/null
file_cmp "$TEST_KEY.err" "$TEST_KEY.err" </dev/null
teardown
#-------------------------------------------------------------------------------
# Check real type checking.
TEST_KEY=$TEST_KEY_BASE-real-ok
setup
init_meta <<__META_CONFIG__
[namelist:values_nl1=my_real]
type=real

[namelist:values_nl1=my_real_as_int_pos]
type=real

[namelist:values_nl1=my_real_as_int_neg]
type=real

[namelist:values_nl1=my_real_neg]
type=real

[namelist:values_nl1=my_real_sci_notation_neg]
type=real

[namelist:values_nl1=my_real_sci_notation_pos]
type=real

[namelist:values_nl1=my_real_array_any]
type=real
length=:

[namelist:values_nl1=my_real_array_fixed]
type=real
length=5
__META_CONFIG__
run_pass "$TEST_KEY" rose macro --validate --config=../config
file_cmp "$TEST_KEY.out" "$TEST_KEY.out" </dev/null
file_cmp "$TEST_KEY.err" "$TEST_KEY.err" </dev/null
teardown
#-------------------------------------------------------------------------------
# Check quoted string type checking.
TEST_KEY=$TEST_KEY_BASE-string-ok
setup
init_meta <<__META_CONFIG__
[namelist:values_nl1=my_quoted]
type=quoted

[namelist:values_nl1=my_quoted_null]
type=quoted

[namelist:values_nl1=my_quoted_esc]
type=quoted

[namelist:values_nl1=my_quoted_complex_esc]
type=quoted

[namelist:values_nl1=my_quoted_array_any]
length=:
type=quoted

[namelist:values_nl1=my_quoted_array_fixed]
length=4
type=quoted
__META_CONFIG__
run_pass "$TEST_KEY" rose macro -V --config=../config
file_cmp "$TEST_KEY.out" "$TEST_KEY.out" </dev/null
file_cmp "$TEST_KEY.err" "$TEST_KEY.err" </dev/null
teardown

#-------------------------------------------------------------------------------
# Check logical type checking.
TEST_KEY=$TEST_KEY_BASE-logical-ok
setup
init_meta <<__META_CONFIG__
[namelist:values_nl1=my_logical_true]
type=logical

[namelist:values_nl1=my_logical_false]
type=logical

[namelist:values_nl1=my_logical_array_any]
length=:
type=logical

[namelist:values_nl1=my_logical_array_fixed]
length=6
type=logical
__META_CONFIG__
run_pass "$TEST_KEY" rose macro -V --config=../config
file_cmp "$TEST_KEY.out" "$TEST_KEY.out" </dev/null
file_cmp "$TEST_KEY.err" "$TEST_KEY.err" </dev/null
teardown
#-------------------------------------------------------------------------------
# Check derived type checking.
TEST_KEY=$TEST_KEY_BASE-derived-ok
setup
init_meta <<__META_CONFIG__
[namelist:values_nl1=my_derived_type_str_int_raw_bool]
type=quoted, integer, raw, boolean

[namelist:values_nl1=my_derived_type_raw_log_char_real]
type=raw, logical, character, real

[namelist:values_nl1=my_derived_type_str_int_raw_bool_array]
type=quoted, integer, raw, boolean
length=3

[namelist:values_nl1=my_derived_type_raw_log_char_real_array]
type=raw, logical, character, real
length=:

[namelist:values_nl1=my_derived_type_real_int_null_array]
type=real, integer
length=:

__META_CONFIG__
run_pass "$TEST_KEY" rose macro -V --config=../config
file_cmp "$TEST_KEY.out" "$TEST_KEY.out" </dev/null
file_cmp "$TEST_KEY.err" "$TEST_KEY.err" </dev/null
teardown
#-------------------------------------------------------------------------------
# Check length checking.
TEST_KEY=$TEST_KEY_BASE-array-ok
setup
init_meta <<__META_CONFIG__
[namelist:values_nl1=my_array_any]
length=:

[namelist:values_nl1=my_array_fixed]
length=8

[namelist:values_nl1=my_array_any_null]
length=:

[namelist:values_nl1=my_array_any_one]
length=:
__META_CONFIG__
run_pass "$TEST_KEY" rose macro -V --config=../config
file_cmp "$TEST_KEY.out" "$TEST_KEY.out" </dev/null
file_cmp "$TEST_KEY.err" "$TEST_KEY.err" </dev/null
teardown
#-------------------------------------------------------------------------------

exit
