#!/usr/bin/env python
#-------------------------------------------------------------------------------
# (C) British Crown Copyright 2012 Met Office.
# 
# This file is part of Rose, a framework for scientific suites.
# 
# Rose is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Rose is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Rose. If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# NAME
#     rosa svn-post-commit
#
# SYNOPSIS
#     rosa svn-post-commit REPOS REV
#
# DESCRIPTION
#     Update the Rosie discovery database for an SVN changeset.
#-------------------------------------------------------------------------------

import os
import re
import rose.config
import subprocess
import sys
import sqlalchemy as al
import tempfile
import time


DATE_FMT = "%Y-%m-%d %H:%M:%S %Z"
RE_ID_NAMES = [r"[a-z]", r"[a-z]", r"\d", r"\d", r"\d"]
LEN_ID = len(RE_ID_NAMES)
INFO_FILE = "rose-suite.info"
REC_COPY_INFO = re.compile("^\s+\(from\s([^\s]+)\)$")
ST_ADDED = "A"
ST_DELETED = "D"
ST_MODIFIED = "M"


class DAO(object):

    T_CHANGESET = "changeset"
    T_MAIN = "main"
    T_OPTIONAL = "optional"
    T_MODIFIED = "modified"
    
    def __init__(self, db_url):
        name = os.path.basename(repos).replace("roses_", "").replace("_svn", "")
        url = rose.config.default_node().get(["rosie-db", "db." + name]).value
        engine = al.create_engine(db_url)
        self.connection = engine.connect()
        self.metadata = al.MetaData(engine)
        self.tables = {}

    def _get_table(self, key):
        if not self.tables.has_key(key):
            self.tables[key] = al.Table(key, self.metadata, autoload=True)
        return self.tables[key]

    def delete(self, key, **kwargs):
        table = self._get_table(key)
        where = None
        for col, value in kwargs.items():
            if where is None:
                where = table.c[col] == value
            else:
                where &= table.c[col] == value
        statement = table.delete(whereclause=where)
        self.connection.execute(statement)
        
    def insert(self, key, **kwargs):
        statement = self._get_table(key).insert().values(**kwargs)
        self.connection.execute(statement)

    def update(self, key, where_match_cols, **kwargs):
        table = self._get_table(key)
        where = None
        for col in where_match_cols:
            if where is None:
                where = table.c[col] == kwargs[col]
            else:
                where &= table.c[col] == kwargs[col]
        statement = table.update(whereclause=where).values(**kwargs)
        self.connection.execute(statement)


def svnlook(*args):
    """Return the standard output from "svnlook"."""
    p = subprocess.Popen(["svnlook"] + list(args), stdout=subprocess.PIPE)
    (out, err) = p.communicate()
    rc = p.wait()
    if rc:
        sys.exit("[FAIL] %s # rc=%d" % (" ".join(["svnlook"] + list(args)), rc))
    return out


def check_path_is_idx(path):
    names = path.split("/")
    if len(names) < LEN_ID + 1:
        return False
    for name, pattern in zip(names, RE_ID_NAMES):
        if not re.compile(r"\A" + pattern + r"\Z").match(name):
            return False
    return True


def main(repos, rev):
    db_name = os.path.basename(repos).replace("roses_", "").replace("_svn", "")
    config = rose.config.default_node()
    dao = DAO(config.get(["rosie-db", "db." + db_name]).value)
    statuses = {}
    copies = {}
    author = svnlook("author", "-r", rev, repos).strip()
    os.environ["TZ"] = "" # ensure UTC
    d, t, junk = svnlook("date", "-r", rev, repos).split(None, 2)
    date = time.mktime(time.strptime(" ".join([d, t, "UTC"]), DATE_FMT))

    path_copies = {}
    path_num = 0
    copy_changes = svnlook("changed", "--copy-info", "-r", rev, repos)
    for i, change in enumerate(copy_changes.splitlines()):
        copy_match = REC_COPY_INFO.match(change)
        if copy_match:
            path_copies[path_num] = copy_match.groups()[0]
        else:
            path_num += 1
    changes = svnlook("changed", "-r", rev, repos)
    for i, line in enumerate(changes.splitlines()):
        status, path = line.split(None, 1)
        if not check_path_is_idx(path):
            continue
        names = path.split("/")
        idx = "".join(names[0:LEN_ID])
        full_idx = db_name + "-" + idx
        branch = names[LEN_ID]
        if i in path_copies and check_path_is_idx(path_copies[i]):
            copy_names = path_copies[i].split("/")
            copy_idx = "".join(copy_names[:LEN_ID])
            if copy_idx != idx:
                copies.setdefault((rev, full_idx, branch), copy_idx)
        
        if branch:
            statuses.setdefault((rev, full_idx, branch), {0: " ", 1: " "})
        branch_path = "/".join(idx) + "/" + branch
        info_file_path = branch_path + "/" + INFO_FILE
        if not branch and status[0] == ST_DELETED:
            out = svnlook("tree", "-r", str(int(rev) - 1), "-N", repos, path)
            for line in out.splitlines()[1:]:
                del_branch = line.strip().rstrip("/")
                statuses.setdefault((rev, full_idx, del_branch), {0: " ", 1: " "})
                statuses[(rev, full_idx, del_branch)][0] = ST_DELETED
        if path.rstrip("/") == branch_path:
            if status[0] == ST_DELETED:
                statuses[(rev, full_idx, branch)][0] = ST_DELETED
                continue
            if status[0] == ST_ADDED:
                statuses[(rev, full_idx, branch)][0] = ST_ADDED
        if (len(path) > len(branch_path) and path != info_file_path and
            statuses[(rev, full_idx, branch)][0].isspace()):
            statuses[(rev, full_idx, branch)][0] = ST_MODIFIED
        if status[0] == ST_DELETED or path != info_file_path:
            continue
        
        f = tempfile.TemporaryFile()
        f.write(svnlook("cat", "-r", rev, repos, path))
        f.seek(0)
        config = rose.config.load(f)
        f.close()
        
        if status[0] == ST_ADDED:
            old_config = rose.config.ConfigNode()
        else:
            f = tempfile.TemporaryFile()
            f.write(svnlook("cat", "-r", str(int(rev) -1), repos, path))
            f.seek(0)
            old_config = rose.config.load(f)
            f.close()

        items = {"revision": rev, "idx": idx, "branch":branch}
        for key, node in old_config.value.items():
            if node.is_ignored():
                continue
            new_node = config.get([key], no_ignore=True)
            if new_node is None:
                statuses[(rev, full_idx, branch)].update({1: ST_MODIFIED})
                dao.insert(dao.T_MODIFIED, name=key, old_value=node.value,
                           new_value=None, **items)
                if key not in ["owner", "project", "title"]:
                    dao.delete(dao.T_OPTIONAL, idx=full_idx, branch=branch, name=key)
            elif node.value != new_node.value:
                statuses[(rev, full_idx, branch)].update({1: ST_MODIFIED})
                dao.insert(dao.T_MODIFIED, name=key, old_value=node.value,
                           new_value=new_node.value, **items)
                if key not in ["owner", "project", "title"]:
                    dao.update(dao.T_OPTIONAL, ("full_idx", "branch", "name"),
                               idx=full_idx, branch=branch, name=key,
                               value=new_node.value)
        for key, node in config.value.items():
            if node.is_ignored():
                continue
            old_node = old_config.get([key], no_ignore=True)
            if old_node is None:
                statuses[(rev, full_idx, branch)].update({1: ST_MODIFIED})
                dao.insert(dao.T_MODIFIED, name=key, old_value=None,
                           new_value=node.value, **items)
                if key not in ["owner", "project", "title"]:
                    dao.insert(dao.T_OPTIONAL, idx=full_idx, branch=branch,
                               name=key, value=node.value)
                
        items = {}
        for key in ["owner", "project", "title"]:
            items[key] = config.get([key], no_ignore=True).value
        if status == ST_ADDED:
            try:
                dao.insert(dao.T_MAIN, idx=full_idx, branch=branch, **items)
            except al.exc.IntegrityError:
                dao.update(dao.T_MAIN, ("idx", "branch"), idx=full_idx, branch=branch,
                           **items)
        else:
            dao.update(dao.T_MAIN, ("idx", "branch"), idx=full_idx, branch=branch,
                       **items)
    for key, value in statuses.items():
        rev, full_idx, branch = key
        full_copy_idx = None
        copy_idx = copies.get(key)
        if copy_idx is not None:
            full_copy_idx = db_name + "-" + copy_idx
        status = ""
        if value[0] == ST_ADDED:
            value[1] = " "
        for num in sorted(value.keys()):
            status += value[num]
        if not (status.isspace() and copy_idx is None):
            dao.insert(dao.T_CHANGESET, revision=rev, idx=full_idx,
                       branch=branch, author=author, date=date,
                       status=status, from_idx=full_copy_idx)


if __name__ == "__main__":
    repos, rev = sys.argv[1:3]
    main(repos, rev)
